# DATASOURCE

# SpringBoot will automatically configure our data source, Based on entries from our pom.xml file
# 1) JDBC Driver: mysql-connector-java
# 2) Spring Data (ORM): spring-boot-starter-data-jpa
# Also SpringBoot will set our connection info from "application.properties"
#
# We can configure more things like, connection pools and so on, take a look on
# https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html
#
# Based on configs, SpringBoot will automatically create the beans:
# - DataSource, EntityManager
# So we can Inject them in our application and have connection to DB automatically!

spring.datasource.url=jdbc:mysql://127.0.0.1:3306/employee_database?useSSL=false&serverTimezone=UTC
spring.datasource.username=web_db_user
spring.datasource.password=web_db_user







# --- Overview ---
# To make use of the ORM feature, we use JPA, but JPA is only a specification or a set of interfaces that require
# some software to implement them in order to be functional, for that we're using Hibernate.
# Up till now, we're using the Hibernate "SessionFactory" to create Sessions so we could make transactions. But this is
# A Hibernate specific API, with "EntityManager" we can achieve the same, even creating Hibernate Sessions with it!
# But contrary to "SessionFactory", the "EntityManager" is a standardized API.
#
# It seems that SpringBoot creates automatically the "EntityManagerFactory" for us